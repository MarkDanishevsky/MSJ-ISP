import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.Border;

public class Minigame extends JPanel {
    private int slider1Value = 1;
    private int slider2Value = 1;
    private int slider3Value = 1;

    private JLabel slider1ResultLabel;
    private JLabel slider2ResultLabel;
    private JLabel slider3ResultLabel;

    private Image backgroundBackdrop;
    private Image backgroundImage;

    private String factText = "";
    private String[] headlines = new String[3]; // bias, fair, propaganda
    private int[] correctAnswers = { 0, 1, 2 }; // bias, fair, propagand

    /**
     * Loads the first fact and headlines from file
     */
    private void loadFactAndHeadlines(String filename) {
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            ArrayList<String> lines = new ArrayList<>();
            String line;

            while ((line = br.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    lines.add(line.trim());
                }
            }

            if (lines.size() >= 4) {
                factText = lines.get(0);
                headlines[0] = lines.get(1); // bias
                headlines[1] = lines.get(2); // fair
                headlines[2] = lines.get(3); // propaganda
            } else {
                factText = "No fact found.";
                Arrays.fill(headlines, "Missing headline");
            }
        } catch (IOException e) {
            factText = "Error loading file.";
            Arrays.fill(headlines, "Error loading headline");
            e.printStackTrace();
        }
    }

    public Minigame(JFrame parentFrame) {
        backgroundBackdrop = new ImageIcon("assets/background.png").getImage();
        backgroundImage = new ImageIcon("assets/minigame_background.png").getImage();

        loadFactAndHeadlines("assets/facts.csv");

        // Adjust correctAnswers to match new display order
        int[] original = correctAnswers.clone(); // [0, 1, 2]
        correctAnswers[0] = original[1]; // fair
        correctAnswers[1] = original[2]; // propaganda
        correctAnswers[2] = original[0]; // bias


        setOpaque(false);
        setLayout(new BorderLayout());

        // ── UI Layout Constants ──
        int titleBottomPadding = 0;
        int gridPadding = 100;
        int gridHGap = 50;
        int gridVGap = 0;
        int extraTopPad = 50;
        int extraBottomPad = 0;
        int buttonTopPadding = 0;

        // --- Title ---
        JLabel titleLabel = new JLabel(
                "<html><div style='text-align: center;'>For your given fact, identify the correct category for each headline.<br>Your fact is: <b>"
                        + factText + "</b></div></html>");
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD, 20f));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(200, 0, titleBottomPadding, 0));
        add(titleLabel, BorderLayout.NORTH);

        // --- Grid ---
        JPanel gridPanel = new JPanel(new GridLayout(3, 3, gridHGap, gridVGap));
        gridPanel.setOpaque(false);
        gridPanel.setBorder(BorderFactory.createEmptyBorder(extraTopPad, gridPadding, extraBottomPad, gridPadding));

        // Headline labels
        // Rearranged headline labels: fair (1) left, propaganda (2) middle, bias (0) right
        gridPanel.add(new JLabel("<html><div style='text-align: center;'>" + headlines[1] + "</div></html>", SwingConstants.CENTER));
        gridPanel.add(new JLabel("<html><div style='text-align: center;'>" + headlines[2] + "</div></html>", SwingConstants.CENTER));
        gridPanel.add(new JLabel("<html><div style='text-align: center;'>" + headlines[0] + "</div></html>", SwingConstants.CENTER));


        JSlider slider1 = createThreeChoiceSlider();
        JSlider slider2 = createThreeChoiceSlider();
        JSlider slider3 = createThreeChoiceSlider();

        slider1.addChangeListener(e -> slider1Value = slider1.getValue());
        slider2.addChangeListener(e -> slider2Value = slider2.getValue());
        slider3.addChangeListener(e -> slider3Value = slider3.getValue());

        gridPanel.add(slider1);
        gridPanel.add(slider2);
        gridPanel.add(slider3);

        slider1ResultLabel = new JLabel(" ", SwingConstants.CENTER);
        slider2ResultLabel = new JLabel(" ", SwingConstants.CENTER);
        slider3ResultLabel = new JLabel(" ", SwingConstants.CENTER);

        gridPanel.add(slider1ResultLabel);
        gridPanel.add(slider2ResultLabel);
        gridPanel.add(slider3ResultLabel);

        add(gridPanel, BorderLayout.CENTER);

        // --- Buttons ---
        JPanel buttonPanel = new JPanel();
        buttonPanel.setOpaque(false);
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(buttonTopPadding, 0, 150, 0));

        JButton submitButton = new JButton("Submit");
        submitButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        submitButton.addActionListener(e -> {
            int[] userChoices = { slider1Value, slider2Value, slider3Value };
            JLabel[] resultLabels = { slider1ResultLabel, slider2ResultLabel, slider3ResultLabel };
            String[] categories = { "bias", "fair", "propaganda" };

            for (int i = 0; i < 3; i++) {
                if (userChoices[i] == correctAnswers[i]) {
                    resultLabels[i].setText("Correct (" + categories[correctAnswers[i]] + ")");
                    resultLabels[i].setForeground(new Color(0, 128, 0));
                } else {
                    resultLabels[i].setText("Incorrect. Please try again");
                    resultLabels[i].setForeground(Color.RED);
                }
            }
        });
        submitButton.setOpaque(true);
        submitButton.setBackground(Color.BLACK);
        submitButton.setForeground(Color.WHITE);
        submitButton.setFocusPainted(false);
        Border redLine = BorderFactory.createLineBorder(Color.RED, 3);
        Border padding = BorderFactory.createEmptyBorder(10, 20, 10, 20);
        submitButton.setBorder(BorderFactory.createCompoundBorder(redLine, padding));
        buttonPanel.add(submitButton);
        buttonPanel.add(Box.createRigidArea(new Dimension(0, 10)));

        JButton closeButton = new JButton("Close");
        closeButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        closeButton.addActionListener(e -> {
            parentFrame.setContentPane(new Menu());
            parentFrame.revalidate();
        });
        closeButton.setOpaque(true);
        closeButton.setBackground(Color.DARK_GRAY);
        closeButton.setForeground(Color.WHITE);
        closeButton.setFocusPainted(false);
        closeButton
                .setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK, 2), padding));
        buttonPanel.add(closeButton);

        add(buttonPanel, BorderLayout.SOUTH);

        parentFrame.setContentPane(this);
        parentFrame.revalidate();
    }

    private JSlider createThreeChoiceSlider() {
        JSlider slider = new JSlider(0, 2, 1);
        slider.setSnapToTicks(true);
        slider.setMajorTickSpacing(1);
        slider.setPaintTicks(true);

        Hashtable<Integer, JLabel> labelTable = new Hashtable<>();
        labelTable.put(0, new JLabel("Bias"));
        labelTable.put(1, new JLabel("Fair"));
        labelTable.put(2, new JLabel("<html><div style='margin-right:15px;'>lol</div></html>"));
        slider.setLabelTable(labelTable);
        slider.setPaintLabels(true);

        // Custom thickness
        slider.putClientProperty("Slider.trackWidth", 50); // Increase track height
        slider.putClientProperty("Slider.thumbHeight", 50); // Optional
        slider.putClientProperty("Slider.thumbWidth", 50);  // Optional

        slider.setOpaque(false);
        return slider;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(backgroundBackdrop, 0, 0, getWidth(), getHeight(), this);
        g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
    }
}
